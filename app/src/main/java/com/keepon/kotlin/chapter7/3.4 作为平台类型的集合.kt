package com.keepon.kotlin.chapter7

/**
 * createBy	 keepon
 */

//前面我们介绍过，Kotlin把那些定义在Java代码中的类型看成 平台类型，
//Kotlin没有任何关于平台类型的可空性信息，所以编译器允许Kotlin代码将其视为可空或者非空，
//同样，Java中声明的集合类型的变量也被视为平台类型。
//
//当我们需要重写或者实现签名中有集合类型的Java方法时，这些差异才变得重要，
//我们需要决定使用哪一种Kotlin类型来表示这个Java类型，它们会反映在产生的Kotlin参数类型中：
//
//集合是否为空？
//集合中的元素是否为空？
//你的方法会不会修改集合？
//例如下面这个使用集合参数的Java接口： DataParser
//
//List<String>将是非空的，因为调用者总是需要接收错误信息。
//列表中的元素将是可空的，因为不是每个输出列表中的条目都有关联的错误信息。
//List<String>将是可变的，因为实现代码需要向其中添加元素。
//
































