package com.keepon.kotlin.chapter13

/**
 * createBy	 keepon
 */
//一个协变类是一个泛型类，如果A是B的子类型，那么Producer<A>就是Producer<B>的子类型，我们说 子类型化被保留了。
//在Kotlin中，要声明类在某个类型参数上是可以协变的，在该类型参数的名称前加上out关键字即可，下面例子就可以表达为：Producer类在类型参数T上是可以协变的。
interface Producer<out T> {
    fun produce() : T
}

//将一个类的类型参数标记为协变的，在 该类型实参没有精确匹配到函数中定义的类型形参时，可以让该类的值作为这些函数的实参传递，也可以作为这些函数的返回值。
//
//你不能把任何类都变成协变的，这样不安全。让类在某个类型参数变为协变，限制了该类中对该类型参数使用 的可能性，要保证类型安全，你只能用在所谓的out位置，意味着这个类 只能生产类型T的值而不能消费它们。


//在类成员的声明中类型参数的使用分为in和out位置，考虑这样一个类，它声明了一个类型参数T并包含了一个使用T的函数：
//
//如果函数把T当成返回类型，我们说它在out位置，这种情况下，该函数生产类型为T的值
//如果T用作函数参数的类型，它就在in的位置，这样函数消费类型为T的值。
//因此类型参数T上的关键字有两层含义：
//
//子类型化会被保留，即前面谈到的Producer<Cat>是Producer<Animal>的子类型
//T只能用在out位置























