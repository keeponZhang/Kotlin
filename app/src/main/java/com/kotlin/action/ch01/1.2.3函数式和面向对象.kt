package com.kotlin.action.ch01.函数式和面向对象.kt

/**
 *createBy keepon
 */

//作为一个Java 开发者，你一定对面向对象编程的核心概念烂熟于胸，但函数式
//编程对你来说却可能很新鲜。函数式编程的核心概念如下：
//· 头等函数一一把函数（ 一小段行为）当作值使用，可以用变量保存它，把它
//当作参数传递，或者当作其他函数的返回值。
//· 不可变性一一使用不可变对象，这保证了它们的状态在其创建之后不能再变
//化。
//· 无副作用一一使用的是纯函数。此类函数在输入相同时会产生同样的结果，
//并且不会修改其他对象的状态， 也不会和外面的世界交互。

//函数式编程风格的代码能给你带来什么好处？首先，简洁。函数式风格的代码
//比相应的命令式风格的代码更优雅、更简练，因为把函数当作值可以让你获得更强
//大的抽象能力，从而避免重复代码。
//假设你有两段类似的代码，实现相似的任务（例如，在集合中寻找一个匹配的
//元素）但具体细节略有不同（如何判断元素是匹配的）。可以轻易地将这段逻辑中公
//共的部分提取到一个函数中，并将其他不同的部分作为参数传递给它。这些参数本
//身也是函数，但你可以使用一种简洁的语法来表示这些匿名函数，它被称作lambda
//表达式：
//
//
//
//函数式编程风格的代码带来的第二个好处是多线程安全。多线程程序中最大的
//错误来源之一就是，在没有采用适当同步机制的情况下，在不同的线程上修改同一
//份数据。如果你使用的是不可变数据结构和纯函数，就能保证这样不安全的修改根
//本不会发生，也就不需要考虑为其设计复杂的同步方案。
//
//
//最后，函数式编程意味着测试更加容易。没有副作用的函数可以独立地进行测
//试，因为不需要写大量的设置代码来构造它们所依赖的整个环境
//
//一般来说，函数式编程风格可以在任何编程语言中使用（包括Java ），它的很
//多主张都被认为是良好的编程风格。然而并不是所有的语言都提供了语法和库支持，
//让我们可以毫不费力地使用这种风格。例如，Java 8之前的Java 版本都缺少了这种
//支持。Kotlin拥有丰富的特性集从一开始就支持函数式编程风格，包括：
//· 函数类型，允许函数接受其他函数作为参数，或者返回其他函数。
//• lambda 表达式，让你用最少的样板代码方便地传递代码块
//· 数据类，提供了创建不可变值对象的简明语法
//· 标准库中包括了丰富的API 集合，让你用函数式编程风格操作对象和集合
//
//Kotlin允许你使用函数式编程风格但并没有强制你使用它。当你需要的时候，
//可以使用可变数据，也可以编写带副作用的函数，而且不需要跳过任何多余的步骤。
//然后，毫无疑问的是，在Kotlin中使用基于接口和类层次结构的库就像Java一样简
//单。当编写Kotlin代码的时候，可以结合使用面向对象编程和函数式编程风格，并
//使用最合适的工具来对付亟待解决的问题。