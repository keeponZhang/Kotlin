package com.kotlin.action.ch01.静态类型.kt

/**
 *createBy keepon
 */
//Kotlin 和Java 一样是一种静态类型的编程语言。这意味着所有表达式的类型在
//编译期已经确定了，而编译器就能验证对象是否包含了你想访问的方法或者宇段。
//这与动态类型的编程语言形成了鲜明的对比， 后者在口TM 上的代表包括
//Groovy 和JRuby。这些语言允许你定义可以存储任何数据类型的变量，或者返回任
//何数据类型的函数，并在运行时才解析方法和字段引用。这会减少代码量并增加创
//建数据结构的灵活性。但它的缺点是，在编译期不能发现像名字拼写错误这样的问
//题，继而导致运行时的错误。
//
//另一方面，与Java 不同的是， Kotlin 不需要你在源代码中显式地声明每个变量
//的类型。很多情况下，变量类型可以根据上下文来自动判断，这样就可以省略类型
//声明。这里有一个可能是最简单的例子：
//val x = 1
//在声明这个变量时，由于变量初始化为整型值， Kotlin 自动判断出它的类型是
//Int 。编译器这种从上下文推断变量类型的能力被称作类型推导。
//
//下面罗列了一些静态类型带来的好处：
//· 性能一一方法调用速度更快，因为不需要在运行时才来判断调用的是哪个方法。
//· 可靠性一一编译器验证了程序的正确性，因而运行时崩溃的概率更低。
//· 可维护性一一陌生代码更容易维护，因为你可以看到代码中用到的对象的类型。
//．工具支持一一静态类型使IDE 能提供可靠的重构、精确的代码补全以及其他
//特性。
//
//其中最重要的概念是Kotlin 对可空类型的支持，通过在编译期检测可能存在的
//空指针异常，它让你可以写出更可靠的程序。
//另一个Kotlin 类型系统的新概念是对函数类型的支持。要搞清楚这一点，我们
//先要了解函数式编程的主要思想，以及Koti in 是如何支持这种编程风格的。