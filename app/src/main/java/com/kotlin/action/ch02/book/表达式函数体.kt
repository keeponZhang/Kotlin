package com.kotlin.action.ch02.book.表达式函数体.kt

/**
 *createBy keepon
 */

//可以让前面的函数变得更简单。因为它的函数体是由单个表达式构成的，可以
//用这个表达式作为完整的函数体，井去掉花括号和return i吾句：
//fun max(a : Int , b: Int) : Int = if (a > b) a else b
//如果函数体写在花括号中，我们说这个函数有代码块休。如果它直接返回了一
//个表达式，它就有表达式休。
//
//还可以进一步简化max 函数，省掉返回类型：
//fun max(a: Int, b: Int ) = if (a > b) a else b
//
//为什么有些函数可以不声明返回类型？作为一门静态类型语言， Kotlin 不是要
//求每个表达式都应该在编译期具有类型吗？事实上，每个变量和表达式都有类型，
//每个函数都有返回类型。但是对表达式体函数来说，编译器会分析作为函数体的表
//达式，并把它的类型作为函数的返回类型，即使没有显式地写出来。这种分析通常
//被称作类型推导。
//
//注意，只有表达式体函数的返回类型可以省略。对于有返回值的代码块体函数，
//必须显式地写出返回类型和return 语句。这是刻意的选择。真实项目中的函数一
//般很长且可以包含多条return 语句，显式地写出返回类型和return 语句能帮
//助你快速地理解函数能返回的是什么